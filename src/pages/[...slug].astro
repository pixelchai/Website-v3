---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import type { ContentEntryMap } from "astro:content";
import { site } from "@/data/consts";
import { formatDate } from "@/utils/markupUtils";
import { getContentComponents, getEntryLinks } from "@/utils/collectionUtils";
import Icon from "@/components/Icon.astro";
import { Debug } from "astro:components";

// SSG
export async function getStaticPaths() {
  // collections for which to generate paths
  // generate all /<collectionName>/<entrySlug> paths
  const collections: (keyof ContentEntryMap)[] = ["articles", "projects"];

  let paths = [];
  for (const collectionName of collections) {
    for (const entry of await getCollection(collectionName)) {
      console.debug(`[SSG][${collectionName}] Processing entry: ${entry.slug}`);

      if (entry.data.draft) {
        console.debug(
          `[SSG][${collectionName}] Skipped draft entry: ${entry.slug}`
        );
        continue;
      }

      paths.push({
        params: { slug: `${collectionName}/${entry.slug}` },
        props: { entry, collectionName },
      });
    }
  }
  return paths;
}

// templating
const collectionName = Astro.props.collectionName as keyof ContentEntryMap;

type Props = {
  collectionName: keyof ContentEntryMap;
  entry: CollectionEntry<typeof collectionName>;
};

const { entry } = Astro.props;
const { Content } = await entry.render();

// links
const links = getEntryLinks(entry);
---

<Layout>
  <!-- title and meta -->
  <div class="my-4">
    <h1 class="grow text-3xl border-0 mb-1 pb-0 font-bold">
      {entry.data.title}
    </h1>
    <div class="border-0 text-base text font-normal text-dark-l">
      <span>
        {formatDate(entry.data.date)}
      </span>
      <span class="mx-1">&mdash;</span>
      <a class="contentf-a" href={`${site.base}/${collectionName}/`}
        >{collectionName}</a
      >
    </div>
  </div>

  <!-- linksbox -->
  <Debug {entry} />
  <div class="">
    <ul class="flex flex-col">
      {
        links.map((link) => (
          <li class="my-2">
            <a href={link.url}>
              {link.icon && <Icon id={link.icon} class="" />}

              {link.title}
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <div class="contentf">
    <Content components={getContentComponents()} />
  </div>
</Layout>
