---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import type { ContentEntryMap } from "astro:content";
import { site } from "@/data/consts";
import { formatDate } from "@/utils/markupUtils";
import {
  getContentComponents,
  getEntryLinks,
  getWipMessage,
  shouldOmitBuild,
} from "@/utils/collectionUtils";
import Icon from "@/components/Icon.astro";
import { Debug } from "astro:components";
import A from "@/components/primitives/A.astro";

// SSG
export async function getStaticPaths() {
  // collections for which to generate paths
  // generate all /<collectionName>/<entrySlug> paths
  const collections: (keyof ContentEntryMap)[] = ["articles", "projects"];

  let paths = [];
  for (const collectionName of collections) {
    for (const entry of await getCollection(collectionName)) {
      console.debug(`[SSG][${collectionName}] Processing entry: ${entry.slug}`);

      if (shouldOmitBuild(entry)) {
        console.debug(
          `[SSG][${collectionName}] Skipped omitBuild entry: ${entry.slug}`
        );
        continue;
      }

      paths.push({
        params: { slug: `${collectionName}/${entry.slug}` },
        props: { entry, collectionName },
      });
    }
  }
  return paths;
}

// templating
const collectionName = Astro.props.collectionName as keyof ContentEntryMap;

type Props = {
  collectionName: keyof ContentEntryMap;
  entry: CollectionEntry<typeof collectionName>;
};

const { entry } = Astro.props;
const { Content } = await entry.render();
const wipMessage = entry.data.wipMessage;

// links
const links = getEntryLinks(entry);
---

<Layout title={entry.data.title} description={entry.data.subtitle}>
  <!-- title and meta -->
  <div class="my-4">
    <h1 class="grow text-3xl border-0 mb-1 pb-0 font-bold">
      {entry.data.title}
    </h1>
    <div class="border-0 text-base text font-normal text-dark-l">
      <span>
        {formatDate(entry.data.date)}
      </span>
      <span class="mx-1">&mdash;</span>
      <a class="contentf-a" href={`${site.base}/${collectionName}/`}
        >{collectionName}</a
      >
    </div>
  </div>

  <!-- linksbox -->
  {
    links.length > 0 && (
      <div class="text-lg p-2 px-3 border border-dotted border-x-0">
        <ul class="flex flex-col gap-0.5">
          {links.map((link) => (
            <li class="">
              <A
                class="flex flex-row items-center w-fit"
                href={link.url}
                newTab={true}
              >
                <Icon id={link.icon ?? "link"} class="mr-1 w-5 h-5" />
                <span>{link.title}</span>
              </A>
            </li>
          ))}
        </ul>
      </div>
    )
  }

  <div class="contentf">
    {
      wipMessage ? (
        <p>
          {(() => {
            if (wipMessage == "default") {
              return "This page is a work in progress. More information coming soon, please check back later!";
            }

            if (wipMessage == "migration") {
              // TODO
              // let ret = "test";
              // return <a href="//example.com">hey thisis a link</a>;
              return "This page is currently in the process of being migrated from an earlier version of this website. The original is accessible at the archive linked above. Otherwise, please check back later!";
            }

            return wipMessage;
          })()}
        </p>
      ) : (
        <Content components={getContentComponents()} />
      )
    }
  </div>
</Layout>
