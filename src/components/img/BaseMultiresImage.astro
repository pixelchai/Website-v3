---
import { combineClasses } from "@/utils/markupUtils";
import type { ImageMetadata } from "astro";
import type { JSX } from "astro/jsx-runtime";
import { getImage } from "astro:assets";

/*
Custom Image component.
Desired behaviour: In the browser, multiple <picture> elements are rendered on top of each other, with the lowest resolution first.
In this way, there is progressive image loading (lowest quality image is rendered first, then higher quality images are rendered on top).
<picture> elements are used instead of <img> elements, so that multiple file formats can be used. The browser will choose the newest format it supports.
Currently this WebP, but will fallback on older browsers to png (or jpg, gif, svg if the original image was in that format).
Alt text is also set, either from the provided prop or from a .alt.txt file in the same directory as the image.
To minimise network requests and CLS, the lowest quality image is inlined as a base64 string.

Note: 
- Focuses on reducing CLS (Cumulative Layout Shift).
- Uses native Astro API (getImage) for image computation (different file formats, sizes, etc).
- Lowest quality image is inlined.

However:
- Picture element is used purely for providing fall-backs for next-gen image formats. 
  Not making use of multiple density srcset functionality -- it is somewhat redundant because multiple resolutions are progressively loaded anyway.
- Only using WebP for now as the next-gen format and not AVIF because I found that AVIF computation greatly reduces build times. (It does result in smaller images though).

Potential future improvements:
- remove low quality images from the DOM once they are loaded using JavaScript (possibly improve accessibility, SEO and memory usage)

IMPORTANT:
This is the base component, which is purely for producing the raw markup. 
CSS and/or scripting is required to stack the multiple resolution images on top of each other as described.
This must be implemented in the parent component.
The reason for this is that different approaches are required depending on e.g. if you want the image to be constrained, and crop to fit the container, or if you want the image to be unconstrained and fill the container.
*/

// constants
const lowQualityResolutions = [
  // max width, max height
  [20, 20],
  [400, 400],
];

// next gen formats, in order of preference
const nextGenFormats: string[] = ["webp"];
const inlineFormat: string = "avif";

// props
type Props = {
  src: string;
  alt?: string;

  width?: number;
  height?: number;

  maxWidth?: number;
  maxHeight?: number;

  class?: string;
  imgClass?: string;
  pictureClass?: string;
  sourceClass?: string;
} & JSX.IntrinsicElements["div"];
export type { Props };

const props = Astro.props;

// import image. Adapted from: https://docs.astro.build/en/recipes/dynamically-importing-images/
const importedImage = (() => {
  const imageLoaders = import.meta.glob<{ default: ImageMetadata }>(
    "/res/**/*"
  );

  if (!imageLoaders[props.src]) {
    throw new Error(`${props.src} not found in /res folder!`);
  }

  return imageLoaders[props.src]();
})();

// fallback format behaviour -- usually png unless original was jpg, gif or svg
const fallbackFormat = (() => {
  if (props.src.endsWith(".jpg") || props.src.endsWith(".jpeg")) {
    return "jpg";
  } else if (props.src.endsWith(".gif")) {
    return "gif";
  } else if (props.src.endsWith(".svg")) {
    return "svg";
  } else {
    return "png";
  }
})();

// default image
const imageResult = (await getImage({
  src: importedImage,
  format: fallbackFormat,
  width: props.width,
  height: props.height,
})) as any; // Astro's getImage return type is incomplete (out of my control)

// parse out useful info
const originalWidth = imageResult.options.src.width;
const originalHeight = imageResult.options.src.height;
const originalAspectRatio = originalWidth / originalHeight;

// fix maxWidth and maxHeight values
const [maxWidth, maxHeight]: [number, number] = (() => {
  if (!props.maxWidth && props.maxHeight) {
    return [Math.floor(props.maxHeight * originalAspectRatio), props.maxHeight];
  } else if (props.maxWidth && !props.maxHeight) {
    return [props.maxWidth, Math.floor(props.maxWidth / originalAspectRatio)];
  } else {
    return [props.maxWidth || 4000, props.maxHeight || 4000];
  }
})();

const [providedWidth, providedHeight, providedAspectRatio] = (() => {
  // get provided width and height
  let width = originalWidth;
  let height = originalHeight;

  if (props.width && !props.height) {
    width = props.width;
    height = Math.floor(props.width / originalAspectRatio);
  } else if (!props.width && props.height) {
    height = props.height;
    width = Math.floor(props.height * originalAspectRatio);
  } else if (props.width && props.height) {
    width = props.width;
    height = props.height;
  }

  let providedAspectRatio = width / height;

  // if the image is too large, scale it down
  if (width > height) {
    width = Math.min(width, maxWidth || 0);
    height = Math.floor(Math.min(width, maxWidth) / providedAspectRatio);
  } else {
    width = Math.floor(Math.min(height, maxHeight) * providedAspectRatio);
    height = Math.min(height, maxHeight);
  }

  return [width, height, providedAspectRatio];
})();

// alt text
const altText = await (async () => {
  // use provided alt text if available
  if (props.alt) {
    return props.alt;
  }

  const altTextLoaders = import.meta.glob<{ default: string }>(
    "/res/**/*.alt.txt",
    {
      query: "?raw",
    }
  );

  // otherwise, look for an alt text file on disk
  const targetPath = props.src.replace(/\.[^/.]+$/, ".alt.txt");
  if (altTextLoaders[targetPath]) {
    return (await altTextLoaders[targetPath]()).default;
  }

  // otherwise, empty string
  console.log(`[Image] Warning: No alt text found for ${props.src}`);
  return "";
})();

// images computation
const getImageVersion = async (
  maxWidth: number,
  maxHeight: number,
  format: string,
  inline: boolean = false
) => {
  let width;
  let height;
  if (originalWidth > originalHeight) {
    width = maxWidth;
    height = Math.floor(maxWidth / providedAspectRatio);
  } else {
    height = maxHeight;
    width = Math.floor(maxHeight * providedAspectRatio);
  }

  const result = await getImage({
    src: importedImage,
    format,
    width,
    height,
  });

  let src: string = result.src;

  if (inline) {
    // get base64 of image
    const fullUrl = "http://localhost:4321" + result.src;

    try {
      const response = await fetch(fullUrl);
      if (response.ok) {
        const buffer = await response.arrayBuffer();
        src = `data:${response.headers.get("content-type")};base64,${Buffer.from(buffer).toString("base64")}`;
      } else {
        throw new Error(`Failed to fetch ${fullUrl}: ${response.statusText}`);
      }
    } catch (error) {
      console.error(`[Image] Error fetching ${fullUrl}: ${error}`);
    }
  }

  return {
    src,
    width,
    height,
    format,
    inline,
  };
};

const getPicture = async (
  maxWidth: number,
  maxHeight: number,
  inline: boolean = false
) => {
  // if inline, no 'nextGenSources'
  let nextGenSources = await Promise.all(
    (inline ? [] : nextGenFormats).map(
      async (format) => await getImageVersion(maxWidth, maxHeight, format)
    )
  );

  let fallbackSource = !inline
    ? await getImageVersion(maxWidth, maxHeight, fallbackFormat)
    : await getImageVersion(maxWidth, maxHeight, inlineFormat, true);

  return {
    nextGenSources,
    fallbackSource,
  };
};

const getAllPictures = async () => {
  let resolutions = [];
  for (let resolution of lowQualityResolutions) {
    if (resolution[0] < providedWidth && resolution[1] < providedHeight) {
      resolutions.push(resolution);
    }
  }
  resolutions.push([providedWidth, providedHeight]);

  return {
    pictures: await Promise.all(
      resolutions.map(
        async (resolution, i) =>
          await getPicture(resolution[0], resolution[1], i === 0)
      )
    ),
    info: {
      originalWidth,
      originalHeight,
      aspectRatio: originalAspectRatio,
      providedWidth,
      providedHeight,
      originalSrc: props.src,
      alt: altText,
    },
  };
};

const imageInfo = await getAllPictures();

// get rest props
const restProps = Object.fromEntries(
  Object.entries(props).filter(
    ([key]) => !["src", "alt", "width", "height"].includes(key)
  )
);
---

<div
  class={combineClasses("image-wrapper", props.class)}
  style={`aspect-ratio: ${imageInfo.info.providedWidth} / ${imageInfo.info.providedHeight}`}
  {...restProps}
>
  {
    imageInfo.pictures.map((picture, pictureIdx) => {
      return (
        <picture
          class={props.pictureClass}
          style={`aspect-ratio: ${imageInfo.info.providedWidth} / ${imageInfo.info.providedHeight}`}
        >
          {picture.nextGenSources.map((source) => {
            return (
              <source
                class={props.sourceClass}
                srcset={source.src}
                type={`image/${source.format}`}
                width={source.width}
                height={source.height}
              />
            );
          })}
          <img
            class={props.imgClass}
            src={picture.fallbackSource.src}
            alt={imageInfo.info.alt}
            width={imageInfo.info.providedWidth}
            height={imageInfo.info.providedHeight}
            loading={pictureIdx === 0 ? "eager" : "lazy"}
            aria-hidden={pictureIdx > 0}
            decoding="async"
          />
        </picture>
      );
    })
  }
</div>
