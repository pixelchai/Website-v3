---
import type { ImageMetadata } from "astro";
import { Picture as AstroPicture, getImage } from "astro:assets";
import { Code } from "astro:components";

/*
Custom Image component.
Uses native Astro API (getImage) to generate images in different resolutions and file formats.
In the browser, multiple <picture> elements are rendered on top of each other, with the lowest resolution first.
In this way, there is progressive image loading (lowest quality image is rendered first, then higher quality images are rendered on top).
<picture> elements are used instead of <img> elements, so that multiple file formats can be used. The browser will choose the newest format it supports.
Currently this WebP, but will fallback on older browsers to png (or jpg, gif, svg if the original image was in that format).
*/

// props
interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
}
const props = Astro.props;

// import image. Adapted from: https://docs.astro.build/en/recipes/dynamically-importing-images/
const importedImage = (() => {
  const imageLoaders = import.meta.glob<{ default: ImageMetadata }>(
    "/res/**/*"
  );

  if (!imageLoaders[props.src]) {
    throw new Error(`${props.src} not found in /res folder!`);
  }

  return imageLoaders[props.src]();
})();

// fallback format behaviour -- usually png unless original was jpg, gif or svg
const fallBackFormat = (() => {
  if (props.src.endsWith(".jpg") || props.src.endsWith(".jpeg")) {
    return "jpg";
  } else if (props.src.endsWith(".gif")) {
    return "gif";
  } else if (props.src.endsWith(".svg")) {
    return "svg";
  } else {
    return "png";
  }
})();

// default image
const imageResult = (await getImage({
  src: importedImage,
  format: fallBackFormat,
  width: props.width,
  height: props.height,
})) as any; // Astro's getImage return type is incomplete (out of my control)

// parse out useful info
const originalWidth = imageResult.options.src.width;
const originalHeight = imageResult.options.src.height;

// temp -- for experimentation
const imageSrcByWidth = async (width: number) => {
  const result = (await getImage({
    src: importedImage,
    format: fallBackFormat,
    width,
  })) as any;
  return result.src;
};

const src1 = await imageSrcByWidth(100);
const src2 = await imageSrcByWidth(600);
const src3 = await imageSrcByWidth(6000);
---

<>
  <AstroPicture
    src={importedImage}
    alt={"a"}
    formats={["webp"]}
    densities={[0.5, 1, 1.5, 2]}
  />
</>
<Code code={JSON.stringify(imageResult, null, 2)} lang="json" />
<!-- <img src={imageResult.src} alt={props.alt} /> -->

<div class="image-wrapper">
  <img src={src1} width="600" height="400" style="width:600px;height;400px;" />
  <img src={src3} width="600" height="400" style="width:600px;height;400px;" />
</div>

<style>
  img {
    /* border: 1px solid red; */
  }
  .image-wrapper {
    display: grid;
    /* max-width: 50%;
    margin: auto; */

    picture {
      display: block;
      grid-area: 1/1/1/1;
      aspect-ratio: attr(width) / attr(height);
    }
  }
</style>
